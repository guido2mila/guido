#!/bin/bash

VAGRANT_DIR="$HOME/Documents/vagrant"
if [ -d $VAGRANT_DIR ]; then
  cd $VAGRANT_DIR
  vagrant destroy -f
  cd ~/Documents
  rm -fr $VAGRANT_DIR
fi

mkdir $VAGRANT_DIR
cd $VAGRANT_DIR

cat << 'EOF' > Vagrantfile
# -*- mode: ruby -*-
# vi: set ft=ruby :
# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

$vagrant_box = "centos/7"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = $vagrant_box
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"
  config.vm.define "puppetserver" do |puppetserver|
    puppetserver.vm.hostname = "puppet.example.com"
      puppetserver.vm.provider "virtualbox" do |vbox|
      vbox.memory = 3072
      vbox.cpus = 1
    end
    puppetserver.vm.provision "shell",
	  inline: "yum -y update && yum -y install https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm && yum -y install puppetserver"
  end
end
EOF
vagrant up

vagrant ssh -- -t 'sudo cp -r /etc/puppetlabs /vagrant; echo "*.example.com" > /vagrant/puppetlabs/puppet/autosign.conf'

vagrant destroy -f

cat << 'EOF' > puppetlabs/code/environments/production/manifests/site.pp
node /^puppet/ {
  package{ "puppetserver":
    ensure => latest,
  }
  file{ "/etc/puppetlabs":
    ensure => 'link',
    force => 'true',
    target => '/vagrant/puppetlabs',
    require => Package["puppetserver"],
    notify => Service["puppetserver"],
  }
  service{ "puppetserver":
    ensure => running,
    require => Package['puppetserver'],
  }
}
node /^client/ {
  package{ "puppet-agent":
    ensure => latest,
  }
  service{ "puppet":
    ensure => running,
    require => Package['puppet-agent'],
  }
}
node default {}
EOF

cat << 'EOF' > Vagrantfile
# -*- mode: ruby -*-
# vi: set ft=ruby :
# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

$vagrant_box = "centos/7"
$puppetserver_ip = "192.168.1.10"
$client_nodes = 1

$setupscript = <<END
  yum -y update
  yum -y install https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
  yum -y install puppet-agent vim telnet nmap
  localectl set-keymap it
  timedatectl set-timezone Europe/Rome
  GTIME=$(cat /etc/default/grub | grep "GRUB_TIMEOUT=")
  sed -i "s/$GTIME/GRUB_TIMEOUT=0/" /etc/default/grub
  grub2-mkconfig -o /boot/grub2/grub.cfg
  echo 'supercede domain-name "example.com";' > /etc/dhcp/dhclient.conf
  sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
  setenforce 0
  systemctl disable firewalld
END

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = $vagrant_box
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"

  config.vm.define "puppetserver" do |puppetserver|
    puppetserver.vm.hostname = "puppet.example.com"
    puppetserver.vm.network "private_network", ip: $puppetserver_ip
    puppetserver.vm.provider "virtualbox" do |vbox|
      vbox.memory = 3072
      vbox.cpus = 1
    end
    puppetserver.vm.provision "shell", inline: $setupscript
    puppetserver.vm.provision "puppet" do |puppet|
      puppet.environment_path = "puppetlabs/code/environments"
      puppet.environment = "production"
    end
  end

  (1..$client_nodes).each do |i|
    config.vm.define vm_name = "client%02d.example.com" % i do |client|
      client.vm.hostname = vm_name
      client.vm.provision "shell", inline: $setupscript
      client.vm.provision "shell", inline: "echo '#{$puppetserver_ip} puppet.example.com puppet' >> /etc/hosts"
      client.vm.provision "puppet_server" do |puppet|
        puppet.puppet_server = "puppet"
      end
    end
  end

end
EOF

vagrant up

cd $VAGRANT_DIR
vagrant reload puppetserver
for i in $(vagrant status | grep "running " | awk '{print $1}' | grep -v puppetserver)
do
  vagrant reload $i
done
